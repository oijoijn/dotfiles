# ──────────────────────────────────────────────
# 基本 alias
# ──────────────────────────────────────────────
alias ni='/snap/bin/nvim'
alias ...='../..'
alias sl='ls'
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

alias cca='mkdir -p ./app domain internal/{repository/mysql,rest} todo/mocks '
# ──────────────────────────────────────────────
# tmux 関連
# ──────────────────────────────────────────────
setup_tmux() {
  # 設定ファイル編集セッション
  if ! tmux has-session -t config 2>/dev/null; then
    tmux new-session -d -s config -n nvim
    tmux send-keys -t config:nvim "cd \$HOME/.config/nvim/lua; nvim " C-m
    tmux new-window -t config: -n tmux
    tmux send-keys -t config:tmux "cd \$HOME; nvim -p .tmux.conf .zsh_aliases " C-m
    tmux new-window -t config: -n dotfiles
    tmux send-keys -t config:dotfiles "cd \$HOME/dotfiles/; nvim " C-m
  fi

  # q-learning 開発セッション
  if ! tmux has-session -t q-learning 2>/dev/null; then
    tmux new-session -d -s q-learning -n sotomine
    tmux send-keys -t q-learning:sotomine "cd \$HOME/workspace/python/q-learning/gemini && source .activate" C-m
    tmux new-window -t q-learning: -n suruga
    tmux send-keys -t q-learning:suruga "cd \$HOME/workspace/python/q-learning/suruga && source .activate" C-m
    tmux new-window -t q-learning: -n takeoka
    tmux send-keys -t q-learning:takeoka "cd \$HOME/workspace/python/q-learning/takeoka && source .activate" C-m
  fi

  # 汎用ワークスペース
  if ! tmux has-session -t workspase 2>/dev/null; then
    tmux new-session -d -s workspase -n todo 
    tmux send-keys   -t workspase:todo 'nvim todo.txt' C-m
    tmux new-window  -t workspase: -n work
  fi

  tmux attach -t workspase:todo
}

alias ts='setup_tmux'
alias tk='tmux kill-server'
alias ta='tmux attach-session -t workspase'
alias kde='kubectl describe'
alias zr='source ~/.zshrc'


# ──────────────────────────────────────────────
# Dev Container + Neovim（個人設定を後乗せ）
# ──────────────────────────────────────────────

devup () {
  devcontainer up \
    --override-config "$HOME/dotfiles/config/devcontainer/devcontainer.json" \
    --mount "type=bind,source=$HOME/dotfiles/config/nvim,target=/nvim-config/nvim" \
    --workspace-folder .
}

devexec() {
  devcontainer exec \
    --remote-env "XDG_CONFIG_HOME=/nvim-config" \
    --workspace-folder . \
    /bin/bash -l   # ← -l を付けるだけ
}
